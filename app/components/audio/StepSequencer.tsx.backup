'use client';

import React, { useState, useCallback, useRef, useEffect } from 'react';
import { MIDIPattern, MIDINote } from './MIDISequencer';

export interface StepSequencerProps {
  patterns: MIDIPattern[];
  isPlaying: boolean;
  currentBeat: number;
  onPatternSelect?: (patternId: string) => void;
  onStepToggle?: (patternId: string, step: number, note: MIDINote) => void;
  onPlay?: () => void;
  onStop?: () => void;
  onVolumeChange?: (volume: number) => void;
  className?: string;
  stepsPerPattern?: number;
  maxSlots?: number;
}

const StepSequencer: React.FC<StepSequencerProps> = ({
  patterns,
  isPlaying,
  currentBeat,
  onPatternSelect,
  onStepToggle,
  onPlay,
  onStop,
  onVolumeChange,
  className = '',
  stepsPerPattern = 16,
  maxSlots = 8
}) => {
  const [selectedPattern, setSelectedPattern] = useState<string | null>(null);
  const [stepGrid, setStepGrid] = useState<{ [patternId: string]: boolean[] }>({});
  const [volume, setVolume] = useState(0.7);

  // Initialize step grid for each pattern
  useEffect(() => {
    const newStepGrid: { [patternId: string]: boolean[] } = {};
    patterns.forEach(pattern => {
      newStepGrid[pattern.id] = new Array(stepsPerPattern).fill(false);
      // Mark existing notes in the grid
      pattern.notes.forEach(note => {
        const stepIndex = Math.floor(note.startTime) % stepsPerPattern;
        if (stepIndex >= 0 && stepIndex < stepsPerPattern) {
          newStepGrid[pattern.id][stepIndex] = true;
        }
      });
    });
    setStepGrid(newStepGrid);
  }, [patterns, stepsPerPattern]);

  const handlePatternSelect = useCallback((patternId: string) => {
    setSelectedPattern(patternId);
    onPatternSelect?.(patternId);
  }, [onPatternSelect]);

  const handleStepToggle = useCallback((patternId: string, step: number) => {
    setStepGrid(prev => ({
      ...prev,
      [patternId]: prev[patternId].map((active, index) => 
        index === step ? !active : active
      )
    }));

    // Create a MIDI note for this step
    const note: MIDINote = {
      note: 60, // Default C4
      velocity: 80,
      startTime: step,
      duration: 1,
      channel: 0
    };

    onStepToggle?.(patternId, step, note);
  }, [onStepToggle]);

  const handleVolumeChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {
    const newVolume = parseFloat(e.target.value);
    setVolume(newVolume);
    onVolumeChange?.(newVolume);
  }, [onVolumeChange]);

  const handlePlayStop = useCallback(() => {
    if (isPlaying) {
      onStop?.();
    } else {
      onPlay?.();
    }
  }, [isPlaying, onPlay, onStop]);

  return (
    <div className={`step-sequencer p-6 bg-gray-900 text-white rounded-lg ${className}`}>
      <h2 className="text-2xl font-bold mb-6">Step Sequencer</h2>
      
      {/* Pattern Selection */}
      <div className="mb-8">
        <h3 className="text-lg font-semibold mb-4">Select Pattern</h3>
        <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
          {patterns.map((pattern) => (
            <div
              key={pattern.id}
              className={`p-3 border-2 rounded-lg cursor-pointer transition-all transform hover:scale-105 ${
                selectedPattern === pattern.id
                  ? 'border-yellow-400 bg-yellow-900/20 shadow-lg'
                  : 'border-gray-600 hover:border-gray-400 bg-gray-800'
              }`}
              onClick={() => handlePatternSelect(pattern.id)}
            >
              <div className="flex items-center justify-between mb-2">
                <h4 className="font-bold text-sm">{pattern.name}</h4>
                <div className="w-3 h-3 rounded-full bg-green-500"></div>
              </div>
              <div className="text-xs text-gray-300 space-y-1">
                <div>‚ô´ {pattern.tempo} BPM</div>
                <div>‚è±Ô∏è {pattern.length} beats</div>
                <div>üéµ {pattern.notes.length} notes</div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Step Grid for Selected Pattern - Drum Machine Style */}
      {selectedPattern && (
        <div className="mb-8">
          <h3 className="text-lg font-semibold mb-4 flex items-center">
            üéõÔ∏è Step Grid: {patterns.find(p => p.id === selectedPattern)?.name}
            <span className="ml-2 text-sm text-gray-400">Beat: {Math.floor(currentBeat) + 1}</span>
          </h3>
          <div className="bg-black p-6 rounded-lg border-2 border-gray-700">
            <div className="grid grid-cols-16 gap-2 mb-4">
              {Array.from({ length: stepsPerPattern }, (_, step) => {
                const isActive = stepGrid[selectedPattern]?.[step] || false;
                const isCurrentStep = step === Math.floor(currentBeat) % stepsPerPattern;
                
                return (
                  <div
                    key={step}
                    className={`h-12 rounded-lg text-xs flex items-center justify-center font-bold cursor-pointer transition-all transform hover:scale-110 ${
                      isCurrentStep
                        ? 'bg-yellow-400 text-black shadow-lg ring-2 ring-yellow-300'
                        : isActive
                        ? 'bg-green-500 text-white shadow-md'
                        : 'bg-gray-800 hover:bg-gray-700 text-gray-400'
                    }`}
                    onClick={() => handleStepToggle(selectedPattern, step)}
                  >
                    {step + 1}
                  </div>
                );
              })}
            </div>
            <div className="flex justify-between items-center text-sm">
              <div className="text-gray-400">
                Click steps to toggle
              </div>
              <div className="flex items-center space-x-2">
                <div className="w-2 h-2 bg-yellow-400 rounded-full animate-pulse"></div>
                <span className="text-gray-300">Playing</span>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Controls */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-6">
          <button
            onClick={handlePlayStop}
            className={`px-8 py-4 rounded-lg font-bold text-lg transition-all transform hover:scale-105 ${
              isPlaying
                ? 'bg-red-600 hover:bg-red-700 shadow-lg'
                : 'bg-green-600 hover:bg-green-700 shadow-lg'
            }`}
          >
            {isPlaying ? '‚èπÔ∏è Stop' : '‚ñ∂Ô∏è Play'}
          </button>
          
          <div className="flex items-center space-x-3">
            <label className="text-sm font-medium">Volume:</label>
            <input
              type="range"
              min="0"
              max="1"
              step="0.01"
              value={volume}
              onChange={handleVolumeChange}
              className="w-24 h-2 bg-gray-700 rounded-lg appearance-none cursor-pointer"
            />
            <span className="text-sm text-gray-400 w-8">
              {Math.round(volume * 100)}%
            </span>
          </div>
        </div>
        
        <div className="text-sm text-gray-400">
          {selectedPattern ? `Selected: ${patterns.find(p => p.id === selectedPattern)?.name}` : 'No pattern selected'}
        </div>
      </div>
    </div>
  );
};

export default StepSequencer;
